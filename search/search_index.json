{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Homepage","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#code-annotation-examples","title":"Code Annotation Examples","text":""},{"location":"#codeblocks","title":"Codeblocks","text":"<p>Some <code>code</code> goes here</p>"},{"location":"#plain-codeblock","title":"Plain codeblock","text":"<p>A plain codeblock:</p> <pre><code>Some code\n</code></pre>"},{"location":"#code-for-a-specific-language","title":"Code for a specific language","text":"<p>Some more code with the <code>py</code> at the start:</p> <pre><code>import tensorflow as tf\ndef whatever ()\n</code></pre>"},{"location":"#with-a-title","title":"With a title","text":"bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"#with-line-numbers","title":"With line numbers","text":"<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"#highlighting-lines","title":"Highlighting lines","text":"<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"#icons-and-emojs","title":"Icons and Emojs","text":""},{"location":"BucketFS/","title":"BucketFS","text":""},{"location":"BucketFS/#restart-bucketfs-in-nga","title":"Restart BucketFS in NGA","text":"<p>Restart bucketfsd, using 'cosrst' (Recommended) <pre><code>cosrst {PID} {NID}\n</code></pre> Restart bucketfsd, using 'coskillall'. This method is not the best, but it will do the trick, having the same PID, FLAGS, and COMMAND name. <pre><code>coskillall -9 bucketfsd-bfsdefault\n</code></pre> Restart bucketfsd, removing the PID. This method will start bucketfsd with the correct UID/GID, name, and other parameters. <pre><code>cosrm -a {PID}\nexaconf commit\n</code></pre></p>"},{"location":"BucketFS/#restart-bucketfs-on-an-exaopeartion-deployment","title":"Restart BucketFS on an EXAopeartion deployment","text":"<pre><code>coskillall appserverd\n</code></pre>"},{"location":"BucketFS/#upload-files-from-outside-the-container","title":"Upload files from OUTSIDE the container","text":"<p>The default path for JDBC drivers is <code>/default/drivers/jdbc/jdbcNN/</code></p> <p>Get the read password of the bucketfs <pre><code>readp=$(echo $(grep ReadPasswd /opt/exa/etc/EXAConf|awk '{print $3}')|base64 -d)\n</code></pre> Get the read password of the bucketfs <pre><code>writep=$(echo $(grep WritePasswd /opt/exa/etc/EXAConf|awk '{print $3}')|base64 -d)\n</code></pre> Get the bucketfs HTTP port <pre><code>http_port=\"$(grep HttpPort /opt/exa/etc/EXAConf | awk '{print $3}')\"\nhttps_port=\"$(grep HttpsPort /opt/exa/etc/EXAConf | awk '{print $3}')\"\n</code></pre></p>"},{"location":"BucketFS/#upload-files-from-inside-the-container","title":"Upload files from INSIDE the container","text":"<p>Verify in which bucketfs (eg. bfsdefault) you want to copy the file <pre><code>confd_client -c bucketfs_list\n</code></pre> Check the bucketfs info <pre><code>confd_client -c bucketfs_info -a 'bucketfs_name: bfsdefault'\n</code></pre> Get the read password of the bucketfs <pre><code>readp=$(echo $(confd_client -c bucketfs_info -a 'bucketfs_name: bfsdefault' | grep read_passwd | awk '{print $2}') | base64 -d)\n</code></pre> Get the read password of the bucketfs <pre><code>writep=$(echo $(confd_client -c bucketfs_info -a 'bucketfs_name: bfsdefault' | grep write_passwd | awk '{print $2}') | base64 -d)\n</code></pre> Get the bucketfs port <pre><code>http_port=$(confd_client -c bucketfs_info -a 'bucketfs_name: bfsdefault' | grep http_port | awk '{print $2}')\nhttps_port=$(confd_client -c bucketfs_info -a 'bucketfs_name: bfsdefault' | grep https_port | awk '{print $2}')\n</code></pre> Read the contents of the bucket (bfsdefault) <pre><code>curl http://r:$readp@localhost:$http_port/default\n</code></pre> Upload files to the bucket (bfsdefault) using HTTP port <pre><code>file=standard-EXASOL-7.1.0_release.tar.gz\ncurl -v -X PUT -T $file http://w:$writep@localhost:$http_port/default/EXAClusterOS/$file\n</code></pre> Upload files to the bucket (bfsdefault) using HTTPS port <pre><code>file=standard-EXASOL-7.1.0_release.tar.gz\ncurl -kv -X PUT -T $file http://w:$writep@localhost:$http_port/default/EXAClusterOS/$file\n</code></pre> If you got issues, check the bucketfs log <pre><code>less $(ls /exa/logs/cored/*bucketfsd*|grep bucketfsd|tail -1)\n</code></pre> Check if the file got synced to the rest of the nodes <pre><code>psh 'ls -lh /exa/data/bucketfs/bfsdefault/default/EXAClusterOS*'\n</code></pre></p>"},{"location":"Confd/","title":"Confd","text":"<p>Get the usage of the confd job <pre><code>confd_client -c help -a {confd_job}\n</code></pre> List database parameters <pre><code>confd_client -c db_info -a 'db_name: exasol'\n</code></pre> Stop the database <pre><code>confd_client -c db_stop -a 'db_name: exasol'\n</code></pre> Start the database <pre><code>confd_client -c db_start -a 'db_name: exasol'\n</code></pre> Get state of the database <pre><code>confd_client db_state db_name: exasol\n</code></pre> Add an extra parameter to the database <pre><code>confd_client -c db_configure -a '{db_name: exasol, params:\"-forceProtocolEncryption=1\"}'\n</code></pre> Add a remote volume (AWS) <pre><code>confd_client -c remote_volume_add -a '{url: https://bomi-v8.s3.us-east-1.amazonaws.com, vol_type: s3, username: AKIAS........A5Q, password: +CrRV2...........DQJrStUDHZ, owner: [500,500]}'\n</code></pre> Add a remote volume (SMB) <pre><code>confd_client -c remote_volume_add -a '{\"vol_type\":\"smb\",\"url\":\"smb:////10.144.35.139/Exasol_UAT\",\"username\":\"USWIN\\\\SVC-SCRE_EXA_BKP\", \"password\": \"base64_encoded\", \"owner\": [500,500], \"options\":[\"timeout=6000,cleanvolume\"]}'\n</code></pre> Start a database backup <pre><code>confd_client -c db_backup_start -a '{db_name: exasol,backup_volume_name: r0001,level: 0}'\n</code></pre> List database backups <pre><code>confd_client -c db_backup_list -a 'db_name: exasol'\n</code></pre> Create an archive volume with specific characteristics <pre><code>confd_client st_volume_create -a '{\"disk\":\"disk1\",\"nodes\":[11],\"redundancy\":1,\"size\":\"100 MiB\",\"type\":\"archive\",\"owner\":[500, 500],\"name\":\"test_archive\"}'\nconfd_client st_volume_create -a '{\"disk\":\"disk1\",\"nodes\":[11,12,13,14],\"redundancy\":2,\"size\":\"8 GiB\",\"type\":\"archive\",\"owner\":[500, 500],\"name\":\"archive\"}'\n</code></pre> Delete a volume <pre><code>confd_client -c st_volume_delete \u2013a '{vid: 0}'\n</code></pre> Configure a backup schedule <pre><code>confd_client -c db_backup_add_schedule -a '{db_name: exasol, backup_name: full backup, backup_volume_name: r0001, enabled: True, level: 0, expire: \"1w 3d\", minute: 0, hour: 1, day: \"*\", month: \"*\", weekday: 6}'\n</code></pre> Restore a database <pre><code>confd_client -c db_restore -a '{backup_id: 1 exa_db/id_1/level_0/node_0/backup_201811131114 exa_db, db_name: exasol, restore_type: blocking}'\n</code></pre> Upload a new license <pre><code>cat &lt;license_file&gt; | confd_client license_upload license: \"\\\"{&lt; -}\\\"\"\n</code></pre></p>"},{"location":"Download-CentOS-packages/","title":"Download CentOS packages","text":"<p>On the Internet-connected Machine: 1. Install yum-utils <pre><code>sudo yum install yum-utils\n</code></pre> 2. Create a Directory for Downloads <pre><code>mkdir package_downloads\ncd package_downloads\n</code></pre> 3. Download the Package and Dependencies <pre><code>repoquery --requires --resolve --recursive package_name | xargs -i yumdownloader {}\n</code></pre> 4. Copy pacakges to the Offline machine <pre><code>rsync -avz --progress /source/directory user@ServerB:/destination/directory\n</code></pre></p> <p>On the Offline Machine: 1. Navigate to the Directory Containing the Packages <pre><code>cd /path/to/package_downloads\n</code></pre> 2. Install the Package and Dependencies: <pre><code>sudo yum localinstall *.rpm\nsudo dnf install *.rpm\n</code></pre></p>"},{"location":"Linux/","title":"Linux","text":"<p>Extract a tar.gz file in one step <pre><code>gunzip -c file.tar.gz | tar xvf \u2013\n</code></pre></p> <p>List the contents of a tar.gz file <pre><code>tar -ztvf file.tar.gz\n</code></pre></p> <p>Check available disk space <pre><code>df -Pm |sort -n -k 5 |tail -5\n</code></pre> <pre><code>df -gMI | sort -n +3 | egrep '9.%|100%'\n</code></pre> <pre><code>df -h | sort -k 5 | egrep '9.%|100%'\n</code></pre></p> <p>Check what services are running <pre><code>systemctl list-units --type=service | grep running\nsystemctl list-units --type=service --state=running\nsystemctl list-units --type=service | grep failed\nsystemctl list-units --type=service --all\njournalctl -b -u systemd-logind\nsystemctl --failed \nsystemctl --all --failed\nsystemctl list-unit-files | grep enabled\nsystemctl | grep running\nsystemctl enable httpd\n</code></pre> Resize a filesystem <pre><code>lvresize -L +100M -r /dev/mapper/rootvg-varvol\n</code></pre> Create a new LV <pre><code>lvcreate -n lvname -L 500M vgname\n</code></pre> Various 'find' commands <pre><code>find / -type f -size +100M -exec ls -lh {} \\; | sort -k 5 -rh | head -n 10\ndu -sh /var/* | sort -rh | head -n 20\nfind . -xdev -type f -exec du -sm '{}' \\; | sort -n | tail -20\nfind . -xdev -type f -mtime +90 -exec ls -l {} \\;\nfind . -xdev -type d -mtime +90 -exec ls -ld {} \\;\nfind . -xdev -type f -name \"*log*\" -mtime +90 -exec ls -l {} \\;\nfind . -xdev -type f -name \"*log*\" -mtime +90 -exec gzip -9 {} \\;\nfind . -xdev -name \"file_type_or_name\" -type f -mtime +90 -exec ls -l {} \\; &gt; log_file 2&gt;&amp;1\nfind . -xdev -name \"file_type_or_name\" -type f -mtime +90 -exec rm -f {} \\; &gt; log_file 2&gt;&amp;1\nfind\u00a0. -xdev -name \"file_type_or_name\" -type f -mtime +90 -exec\u00a0ls -l\u00a0{} \\; -exec rm -f {} \\; &gt; log_file 2&gt;&amp;1\nfind . -xdev -type f -ls | sort +6n | tail -n 10\nfind . -type f -size 0 -ls\nfind . -print | sed -e 's;[^/]*/;|;g;s;|; |;g'\nfind . -type d -print | sed -e 's;[^/]*/;|;g;s;|; |;g'\nfind . -user username\nfind . -user username -exec rm -r {} \\;\nfind . -size +2048 -mtime +30 -exec ls -l {} \\;\nfind . -exec ls -la {} \\; | awk '{ if ( $8==2016) printf $0\"\\n\" }'\n</code></pre> Create dummy files <pre><code>dd if=/dev/zero of=/tmp/zero.file bs=1M count=10\ndd if=/dev/random of=/tmp/zero.file bs=1M count=10\ndd if=/dev/urandom of=/tmp/zero.file bs=1M count=10\ndd if=/dev/zero of=/tmp/zero.file\n</code></pre> Archive a log file <pre><code>LOG=WHATEVER_YOU_WANT\ncat ${LOG} | gzip -9 &gt; /tmp/${LOG}_$(date +%Y%m%d).gz &amp;&amp; cat /dev/null &gt; ${LOG} &amp;&amp; mv /tmp/${LOG}_$(date +%Y%m%d).gz .\n</code></pre> Forward a port <pre><code>ssh root@license-prod -L 8443:10.6.252.31:443 -L 17990:10.6.252.31:17990\nhttps://localhost:8443/\n</code></pre> List all installed packages <pre><code>dpkg -l\n</code></pre> List details about a package <pre><code>dpkg -s &lt;package_name&gt;\n</code></pre></p>"},{"location":"Networking/","title":"Networking","text":""},{"location":"Networking/#ip-link","title":"IP LINK","text":"<p>Set interface state to 'down' <pre><code>ip link set dev {intf_name} down\nifconfig {intf_name} down\n</code></pre> Set interface state to 'up' <pre><code>ip link set dev {intf_name} up\nifconfig {intf_name} up\n</code></pre> Rename an interface <pre><code>ip link set {OLD_intf_name} name {NEW_intf_name}\n</code></pre> Change the active slave on an active-backup bond <pre><code>ip link set dev {bond_name} type bond active_slave {intf_name}\n</code></pre></p>"},{"location":"Networking/#bonds","title":"BONDS","text":"<p>Create an active-backup bond interface <pre><code>ip link add name bond0 type bond mode active-backup\nip link set master bond0 dev eth1\nip link set master bond0 dev eth0\nip link set up dev bond0\nip address add 192.168.100.1/24 dev bond0\n</code></pre> Check detailed info and statistics of bond0 <pre><code>ip -s -s -d link ls dev bond0\n</code></pre> Check the state of ALL under-laying interfaces <pre><code>ip -s -s -d link ls master bond0\n</code></pre></p>"},{"location":"Networking/#iftop","title":"IFTOP","text":"<p>Monitor the network traffic to a specific destination address <pre><code>iftop -n -i {intf_name} -f \"dst host {ip_address}\"\n</code></pre></p>"},{"location":"Networking/#use-omni-calculator-if-needed","title":"Use OMNI calculator if needed","text":"<p>https://www.omnicalculator.com/other/bandwidth</p>"},{"location":"Networking/#iperf3","title":"IPERF3","text":"<p>Start <code>iperf</code> on 'destination' server <pre><code>iperf3 -s -p 60000\n</code></pre> Test the connection from 'source' server <pre><code>iperf3 -c {dest_ip} -p 60000\n</code></pre></p>"},{"location":"Networking/#ncat","title":"NCAT","text":"<p>Start <code>ncat</code> on 'destination' server <pre><code>nc -l 60000\n</code></pre> Create a dummy file and the connection from 'source' server <pre><code>dd if=/dev/zero bs=1M count=1024 | nc {dest_ip} 60000\n</code></pre></p>"},{"location":"Networking/#check-if-a-port-is-listening","title":"Check if a port is listening","text":"<p>Using 'nc' <pre><code>nc -zv {ip} {port}\n</code></pre> Using 'ss' <pre><code>ss -antp | grep {port}\n</code></pre> Using 'netstat' <pre><code>netstat -anp | grep {port}\n</code></pre></p>"},{"location":"Networking/#download-files-using-curl","title":"Download files using 'curl'","text":"<pre><code>curl -k -X GET  https://{link} --output {file_name}\n</code></pre>"},{"location":"Other/","title":"Other","text":""},{"location":"Other/#dmidecode","title":"DMIDECODE","text":"<p>Print various system information <pre><code>Valid type keywords:\n  bios\n  system\n  baseboard\n  chassis\n  processor\n  memory\n  cache\n  connector\n  slot\n\ndmidecode -t system\ndmidecode -t bios\ndmidecode -t memory\n</code></pre> Check if system is barebone/physical or virtualized <pre><code>Valid strings keywords:\n  bios-vendor\n  bios-version\n  bios-release-date\n  system-manufacturer\n  system-product-name\n  system-version\n  system-serial-number\n  system-uuid\n  system-family\n  baseboard-manufacturer\n  baseboard-product-name\n  baseboard-version\n  baseboard-serial-number\n  baseboard-asset-tag\n  chassis-manufacturer\n  chassis-type\n  chassis-version\n  chassis-serial-number\n  chassis-asset-tag\n  processor-family\n  processor-manufacturer\n  processor-version\n  processor-frequency\n\ndmidecode -s system-manufacturer\ndmidecode -s processor-frequency\n</code></pre></p>"},{"location":"Other/#proc","title":"PROC","text":"<p>Check memory allocation <pre><code>cat /proc/meminfo\n</code></pre> Check CPU info <pre><code>cat /proc/cpuinfo\n</code></pre></p>"},{"location":"Other/#top","title":"TOP","text":"<ul> <li> <p>Cycles through different memory units in 'top' (KiB, MiB, GiB) pressing 'E'</p> </li> <li> <p>Check Swap usage </p> </li> <li>Run the TOP command</li> <li>On your keyboard press the \u201cf\u201d key and scroll down using the [down] arrow key until you have selected \u201cSWAP\u201d then press [Space] to select it. This should add a \u201c*\u201d symbol in front of it.</li> <li>While still selecting \u201cSWAP\u201d press the [right] arrow key, which highlights the entire SWAP line, and using the [top] arrow key move it up to one of the first options (anywhere above \u201cCOMMAND\u201d).</li> <li>While still having \u201cSWAP\u201d selected, type the \u201cs\u201d key which will configure top to SORT by the currently selected option, in this case, SWAP. You will not see any changes on the screen when you press \u201cs\u201d, but the setting is saved in the backend.</li> <li>Finally \u201cq\u201d to save the configuration changes and view the results.</li> </ul>"},{"location":"Other/#tar","title":"TAR","text":"<p>Open a log file (without extracting) from tar.gz archive <pre><code>tar -Oxvf filename.tar.gz /path/to/file.log | less\n</code></pre> View contents of a tar.gz archive <pre><code>tar -tf filename.tar.gz | less\n</code></pre> Extract just one file from a tar.gz archive <pre><code>tar -zxvf filename.tar.gz  /path/to/file_name\n</code></pre> Extract tar.gz files creating a directory with the same name as the archive and excluding the Sql Sessions and Server logs <pre><code>find . -name \"*.tar.gz\" -execdir tar --exclude='*Sql*' --one-top-level -xvzf {} \\;\n</code></pre> Forward port <pre><code>ssh -L{local_port}:{remote_IP}:{remote_port} {via_host}\nexample: ssh -L8443:10.30.31.54:443 jumphost\n</code></pre> Route traffic via a jumphost <pre><code>ssh -vv -ND 8888 user@yourserver\n</code></pre> In <code>firefox</code>, go to Preferences -&gt; Advanced -&gt; Network -&gt; Connection: Settings. Select Manual proxy configuration and add a <code>SOCKS v5</code> proxy: SOCKS Host:   localhost    Port 8080</p>"},{"location":"Rsync/","title":"Rsync","text":"<p>Sync/copy one file from ServerA to ServerB <pre><code>rsync -avz --progress /source/directory user@ServerB:/destination/directory\n</code></pre> Sync with an SSH key pair <pre><code>rsync -avz --progress -e \"ssh -i /path/to/private_key\" /source/directory user@ServerB:/destination/directory\n</code></pre></p>"},{"location":"SQL/","title":"SQL","text":"<p>Find DB raw size <pre><code>SELECT INTERVAL_START,RAW_OBJECT_SIZE_AVG FROM EXA_STATISTICS.EXA_DB_SIZE_DAILY order by interval_start desc limit 1;\nor\nSELECT * FROM EXA_STATISTICS.EXA_DB_SIZE_DAILY order by interval_start desc limit 1;\n</code></pre> Find recommended DB RAM size <pre><code>select INTERVAL_START,RECOMMENDED_DB_RAM_SIZE_AVG FROM EXA_STATISTICS.EXA_DB_SIZE_MONTHLY order by interval_start desc limit 10;\n</code></pre> Check what is running right now <pre><code>select * from \"$EXA_PROFILE_RUNNING\" order by duration desc;\n</code></pre> Check when the database version was updated or DB RAM/parameter CHANGE <pre><code>SELECT max(measure_time) AS \"WHEN\", dbms_version AS \"VERSION\", db_ram_size, parameters\n  FROM exa_system_events s\n  WHERE event_type = 'STARTUP'\n  GROUP BY dbms_version, db_ram_size, parameters\n  ORDER BY LOCAL.\"WHEN\" DESC;\n</code></pre> Create a connection <pre><code>CREATE CONNECTION mysql_con TO 'jdbc:mysql://192.168.6.1'\n                            USER 'my_user'\n                            IDENTIFIED BY 'my_pw';\n</code></pre> Create a table <pre><code>CREATE TABLE customers (firstname VARCHAR (200),\n                        lastname VARCHAR (200),\n                        birthday DATE);\n</code></pre> Import data <pre><code>IMPORT INTO customers FROM jdbc AT mysql_con TABLE customers;\n</code></pre> Check what kind of DB profile is running <pre><code>select * from EXA_DBA_PROFILE_RUNNING where session_id!=current_session;\n</code></pre> Find out how much DB RAM is allocated to the DB <pre><code>select * from EXA_SYSTEM_EVENTS order by 2 desc;\n</code></pre></p>"},{"location":"SQL/#system-tables","title":"SYSTEM TABLES","text":"<pre><code>select * from exa_syscat;                       --- Check the existing database tables for system and statistic information\nselect * from exa_dba_sessions;                 --- Check the ongoing sessions connected to the database\nselect * from exa_metadata where param_name like 'database%';   --- Check the most important database attributes:\nselect * from exa_parameters;                   --- Check the database parameters, configurable on system and session layer\nselect * from exa_system_events;                --- Check the system events\nselect * from exa_system_events order by 2 desc limit 20;       --- Check the system events\nexport (select * from exa_system_events order by 2 desc limit 20) into local csv file '/home/bomi/sys_events.csv' with column names; --- Export the system events in local CSV file\nselect CURRENT_TIMESTAMP;                       --- Check the current timestamp from DB point of view\n</code></pre>"},{"location":"SQL/#users-and-privileges","title":"USERS and PRIVILEGES","text":"<pre><code>create user user1 identified by \"user1\";            --- As the sys user, create a new user named user1\ngrant create session to user1;                      --- Allow that user to connect to the database\ncreate role role1;                                  --- Create a new role named role1\ngrant create schema,create table to role1;          --- Grant the system privileges needed to create schemas and tables to that role\ngrant role1 to user1;                               --- Grant that role to user1\nconnect user1/user1;                                --- Connect as user1 to the database\ncreate schema user1;                                --- Create a new schema as that user:\ncreate table t1 as select * from exa_session_privs; --- Create a table within that schema for that user\nselect * from exa_user_tables;                      --- Check metainfo of your tables:\n</code></pre>"},{"location":"SQL/#schemas","title":"SCHEMAS","text":"<p><pre><code>CREATE SCHEMA IF NOT EXISTS schema_name;            --- Create a new schema\nALTER SCHEMA schema_name CHANGE OWNER user_or_role  --- Change owner of schema\nDROP SCHEMA IF EXISTS schema_name [CASCADE];\n</code></pre> Export a table into a local CSV file <pre><code>export (select * from exa_dba_schemas) into local csv file 'O:\\schemas.csv' with column names;\n</code></pre> Audit hast to be enabled. Check the performance hogs by DURATION <pre><code>select * from \"EXA_STATISTICS\".\"EXA_DBA_AUDIT_SQL\" where start_time &gt; '2022-05-29 17:12:00' and stop_time &lt; '2022-05-30 17:12:00' order by DURATION desc limit 20;\n</code></pre> Same as above but selecting custom columns <pre><code>select session_id, command_name, duration, start_time, stop_time, temp_db_ram_peak, persistent_db_ram_peak, SQL_TEXT from \"EXA_STATISTICS\".\"EXA_DBA_AUDIT_SQL\" where start_time &gt; '2022-05-29 17:12:00' and stop_time &lt; '2022-05-30 17:12:00' order by DURATION desc limit 20;\n</code></pre></p>"},{"location":"Scripts/","title":"Scripts","text":""},{"location":"Scripts/#ping-hosts","title":"Ping HOSTS","text":"<p>Ping hosts from /etc/hosts <pre><code>#!/bin/bash\n\n# Path to the hosts file\nhosts_file=\"/etc/hosts\"\n\n# Check if the file exists\nif [ ! -e \"$hosts_file\" ]; then\n  echo \"Hosts file not found: $hosts_file\"\n  exit 1\nfi\n\n# Extract hostnames from the hosts file\nhostnames=$(awk '/^[0-9]/ {print $2}' \"$hosts_file\")\n\n# Ping each host once and print result\nfor host in $hostnames; do\n  echo -n \"Pinging $host... \"\n  if ping -c 1 $host &amp;&gt; /dev/null; then\n    echo \"OK\"\n  else\n    echo \"NOK\"\n  fi\n  echo \"----------------------\"\ndone\n\necho \"Ping process completed.\"\n</code></pre></p>"},{"location":"Scripts/#ping-ip","title":"Ping IP","text":"<p>Ping IPs from file <pre><code>#!/bin/bash\n\n# Path to the source file containing IP addresses (one per line)\nsource_file=\"/home/user/idrac_ips\"\n\n# Check if the file exists\nif [ ! -e \"$source_file\" ]; then\n  echo \"Source file not found: $source_file\"\n  exit 1\nfi\n\n# Read IP addresses from the source file\nip_addresses=$(cat \"$source_file\")\n\n# Ping each IP address once and print result\nfor ip in $ip_addresses; do\n  echo -n \"Pinging $ip... \"\n  if ping -c 1 $ip &amp;&gt; /dev/null; then\n    echo \"OK\"\n  else\n    echo \"NOK\"\n  fi\n  echo \"----------------------\"\ndone\n\necho \"Ping process completed.\"\n</code></pre></p>"},{"location":"Scripts/#swap","title":"SWAP","text":"<p>Check SWAP usage <pre><code>#!/bin/bash\n\n    # find-out-what-is-using-your-swap.sh\n    # -- Get current swap usage for all running processes\n    # --\n    # -- rev.0.3, 2012-09-03, Jan Smid          - alignment and intendation, sorting\n    # -- rev.0.2, 2012-08-09, Mikko Rantalainen - pipe the output to \"sort -nk3\" to get sorted output\n    # -- rev.0.1, 2011-05-27, Erik Ljungstrom   - initial version\n\n\nSCRIPT_NAME=`basename $0`;\nSORT=\"kb\";                 # {pid|kB|name} as first parameter, [default: kb]\n[ \"$1\" != \"\" ] &amp;&amp; { SORT=\"$1\"; }\n\n[ ! -x `which mktemp` ] &amp;&amp; { echo \"ERROR: mktemp is not available!\"; exit; }\nMKTEMP=`which mktemp`;\nTMP=`${MKTEMP} -d`;\n[ ! -d \"${TMP}\" ] &amp;&amp; { echo \"ERROR: unable to create temp dir!\"; exit; }\n\n&gt;${TMP}/${SCRIPT_NAME}.pid;\n&gt;${TMP}/${SCRIPT_NAME}.kb;\n&gt;${TMP}/${SCRIPT_NAME}.name;\n\nSUM=0;\nOVERALL=0;\n    echo \"${OVERALL}\" &gt; ${TMP}/${SCRIPT_NAME}.overal;\n\nfor DIR in `find /proc/ -maxdepth 1 -type d -regex \"^/proc/[0-9]+\"`;\ndo\n    PID=`echo $DIR | cut -d / -f 3`\n    PROGNAME=`ps -p $PID -o comm --no-headers`\n\n    for SWAP in `grep Swap $DIR/smaps 2&gt;/dev/null| awk '{ print $2 }'`\n    do\n        let SUM=$SUM+$SWAP\n    done\n\n    if (( $SUM &gt; 0 ));\n    then\n        echo -n \".\";\n        echo -e \"${PID}\\t${SUM}\\t${PROGNAME}\" &gt;&gt; ${TMP}/${SCRIPT_NAME}.pid;\n        echo -e \"${SUM}\\t${PID}\\t${PROGNAME}\" &gt;&gt; ${TMP}/${SCRIPT_NAME}.kb;\n        echo -e \"${PROGNAME}\\t${SUM}\\t${PID}\" &gt;&gt; ${TMP}/${SCRIPT_NAME}.name;\n    fi\n    let OVERALL=$OVERALL+$SUM\n    SUM=0\ndone\necho \"${OVERALL}\" &gt; ${TMP}/${SCRIPT_NAME}.overal;\necho;\necho \"Overall swap used: ${OVERALL} kB\";\necho \"========================================\";\ncase \"${SORT}\" in\n    name )\n        echo -e \"name\\tkB\\tpid\";\n        echo \"========================================\";\n        cat ${TMP}/${SCRIPT_NAME}.name|sort -r;\n        ;;\n\n    kb )\n        echo -e \"kB\\tpid\\tname\";\n        echo \"========================================\";\n        cat ${TMP}/${SCRIPT_NAME}.kb|sort -rh;\n        ;;\n\n    pid | * )\n        echo -e \"pid\\tkB\\tname\";\n        echo \"========================================\";\n        cat ${TMP}/${SCRIPT_NAME}.pid|sort -rh;\n        ;;\nesac\nrm -fR \"${TMP}/\";\n</code></pre></p>"},{"location":"Storage/","title":"Storage","text":""},{"location":"Storage/#csinfo","title":"CSINFO","text":"<p>Print summary of volume information <pre><code>csinfo\n</code></pre> Print all volume information <pre><code>csinfo -v\n</code></pre> Print volume information for a specific vol. id <pre><code>csinfo -v -i {vol_id}\n</code></pre> Print volume segment information <pre><code>csinfo -v -i {vol_id} -l2\n</code></pre> Show HDD state <pre><code>csinfo -H\n</code></pre> Show HDD state <pre><code>csinfo -H\n</code></pre> Print HDD info <pre><code>csinfo -D\n</code></pre></p>"},{"location":"Storage/#sdfs","title":"SDFS","text":"<p>List contents of the remote archive volume <pre><code>sdfs list {vol_id}\n</code></pre> Add one or more files to the volume <pre><code>sdfs add {vol_id} {exp_date} {file}\n</code></pre> Add data from stdin as new file to SDFS <pre><code>sdfs addraw {vol_id} {exp_date} {file}\n</code></pre> Remove file(s) from volume (or only mark as deleted if there is enough space) <pre><code>sdfs remove {vol_id} -r {file}\n</code></pre> Copy a file between archive volumes <pre><code>sdfs getraw (vol_id} {file} | sdfs addraw {vol_id} {exp_date} {file}\n</code></pre> Copy a file between archive volumes <pre><code>sdfs rename (vol_id} {old_file_name} {new_file_name}\n</code></pre></p>"},{"location":"Storage/#csctrl","title":"CSCTRL","text":"<p>Stop storage services <pre><code>csctrl -d\n</code></pre> Suspend storage <pre><code>csctrl -u\n</code></pre> Start storage services on NGA <pre><code>csctrl -s -A -R -n 11,12 -c /exa/etc/cos_storage.conf\n</code></pre> Start storage services on non-NGA <pre><code>csctrl -s -A -R -n 11,12 -c /usr/opt/EXASuite-7/EXAClusterOS-7.1.21/etc/cos_storage.conf\n</code></pre></p>"},{"location":"Storage/#csvol","title":"CSVOL","text":"<p>Drop/delete a volume <pre><code>csvol -d -v {vol_id}\n</code></pre> Create a volume with specific attributes <pre><code>csvol -c -s 7 -b 4 -S 256 -r 1 -h disk1 -p rwx------ -m 5 -C -H -P 10 -B VERTICAL\n</code></pre> Rename a volume <pre><code>csvol -v 0 -y -I {vol_name}\n</code></pre> Set disk permissions to specific user <pre><code>csvol -v 0 -O -U {user} -G {group}\n</code></pre> Lock a volume <pre><code>csvol -l -v {vol_id}\n</code></pre> Unlock a volume <pre><code>csvol -L -v {vol_id}\n</code></pre></p>"},{"location":"Storage/#csrec-cshdd-cstop","title":"CSREC, CSHDD, CSTOP","text":"<p>View the storage recovery process <pre><code>csrec -s -v {vol_id}\n</code></pre> Enable an OFFLINE disk <pre><code>cshdd -e -h /dev/mapper/... -n 11\n</code></pre> Monitor cluster performance <pre><code>cstop\n</code></pre></p>"},{"location":"TMUX/","title":"TMUX","text":"<p>Start new session: <code>tmux</code></p> <p>Start new named session: <code>tmux new -s session_name</code></p> <p>Attach to a session: <code>tmux attach -t session_name</code></p> <p>Detach from session: <code>Ctrl+b d</code></p> <p>List sessions: <code>tmux ls</code></p> <p>Kill session: <code>tmux kill-session -t session_name</code></p> <p>Split pane horizontally: <code>Ctrl+b \"</code></p> <p>Split pane vertically: <code>Ctrl+b %</code></p> <p>Switch to pane: <code>Ctrl+b arrow_key</code></p> <p>Close pane: <code>exit</code> or <code>Ctrl+d</code></p> <p>Create window: <code>Ctrl+b c</code></p> <p>Switch to window: <code>Ctrl+b window_number</code></p> <p>Rename window: <code>Ctrl+b ,</code></p> <p>Find window: <code>Ctrl+b f</code></p> <p>To scroll in tmux, you need to enter copy mode:</p> <p>Enter copy mode: <code>Ctrl+b [</code></p> <p>Scroll up/down: <code>Use arrow keys or Page Up/Page Down</code></p> <p>Scroll up a page: <code>Press Ctrl + \u2191</code></p> <p>Scroll down a page: <code>Press Ctrl + \u2193</code></p> <p>Exit copy mode: <code>Press q</code></p> <p>In tmux, you can adjust the size of the panes manually with specific commands after pressing Ctrl+b followed by : to enter command mode.</p> <p>Resize Down: <code>resize-pane -D [amount]</code></p> <p>Resize Up: <code>resize-pane -U [amount]</code></p> <p>Resize Right: <code>resize-pane -R [amount]</code></p> <p>Resize Left: <code>resize-pane -L [amount]</code></p> <p>If you want to redistribute the space equally among all panes within a window, you can use the <code>select-layout</code> command.</p> <p>Equal Horizontal Distribution: <code>select-layout even-horizontal</code></p> <p>Equal Vertical Distribution: <code>select-layout even-vertical</code></p> <p>For more interactive resizing without entering command mode: Resize Mode: Press <code>Ctrl+b followed by :</code>, then type <code>resize-pane -m</code> to enter resize mode. After this, you can use the arrow keys to resize the active pane. Press <code>Enter</code> to exit resize mode.</p> <p>Type in all panes at the same time <code>setw synchronize-panes on</code></p>"},{"location":"Update-EXAsolution-via-CLI/","title":"Update EXAsolution via CLI","text":"<p>Here's the step-by-step guide: 1. SCP the update packages (both) to the License Server. <code>rsync -avP EXA*.pkg root@{LS_IP}:/tmp/</code> 2. Make sure no backup or storage recovery is in progress. 3. Make sure EXAopeartion is running on the License Server. Check this in the EXAopeartion section. 4. Go to the Software section and remove the obsolete EXASolution version(s). 5. Stop the Database. 6. Stop the Storage Services. 7. Stop the Cluster Services on the data nodes. 8. SSH into the LS and create the update directory. <code>mkdir /tmp/exasuite_update/</code> 9. Extract the package. <code>tar xf EXAClusterOS-7.1.NN_LS-Update.pkg -C /tmp/exasuite_update/</code> 10. Start the EXAClusterOS update. <pre><code>$COS_DIRECTORY/share/exaoperation/scripts/exaclusteros_update.sh /tmp/exasuite_update/EXAClusterOS-7.1.NN_LS-Update-CentOS-7.5.NNNN_x86_64.tar.gz\n</code></pre> 11. Check the EXAopeartion log and look for the start and completion messages. <pre><code>tail -f /var/log/logd/EXAoperation.log\n[2023-12-07 16:03:29.911675] NOTICE: [Software update] Start update process to EXAClusterOS version 7.1.NN.\n[2023-12-07 16:04:10.064588] NOTICE: [Software update] First part of update process succeeded. Please shutdown databases and nodes and restart license server.\n</code></pre> 12. Apply the CentOS security patch update. <pre><code>apply_os_security_updates /tmp/EXASOL-7.1-CentOS-7-CumulativeUpdate-YYYYMMDDHHMM.pkg\n</code></pre> <code>Note: In case you see a message like this \"Dismiss already applied patchlevel YYYYMMDDHHMM\", it means there is no update needed, and you can continue the procedure.</code></p> <ol> <li>Reboot the license node.</li> <li>Check the Software tab and confirm the new version was successfully applied.</li> <li>Make sure there is enough space in the root filesystem <code>(df -h /)</code>. If not, try removing some files to release space.</li> <li>Reboot the data nodes.</li> <li>Start the Storage Services.</li> <li>Start the Database.</li> </ol>"},{"location":"iDRAC/","title":"iDRAC","text":""},{"location":"iDRAC/#ipmitool","title":"IPMITOOL","text":"<p>Restart (Warm) the iDRAC <pre><code>ipmitool mc reset warm\n</code></pre> List System Event Log <pre><code>ipmitool sel list\n</code></pre> Clear System Event Log <pre><code>ipmitool sel clear\n</code></pre> Check status of IPMI remotely <pre><code>ipmitool -I lanplus -U {user} -P {pass} -H {idrac_IP} chassis power status\n</code></pre></p>"},{"location":"iDRAC/#racadm","title":"RACADM","text":"<p>Reset - This reboots the iDRAC without changing any iDRAC configuration settings. <pre><code>racadm racreset\n</code></pre> Get the System Event Log <pre><code>racadm getsel\n</code></pre> Display all the available records from the active Lifecycle log. <pre><code>racadm lclog view\n</code></pre> Display the number of records present in the Lifecycle log. <pre><code>racadm lclog view -i\n</code></pre> Display the iDRAC agent idrac records, under the storage category and storage physical disk drive subcategory, with severity set to warning. <pre><code>racadm lclog view -a idrac -c storage -b pdr -s warning\n</code></pre> Display the records under storage and system categories with severities set to warning or critical. <pre><code>racadm lclog view -c storage,system -s warning,critical\n</code></pre> Display the records having severities set to warning or critical, starting from sequence number 4. <pre><code>racadm lclog view -s warning,critical -q 4\n</code></pre> Display 5 records starting from sequence number 20. <pre><code>racadm lclog view -q 20 -n 5\n</code></pre> Display all records of events that have occurred between 2011-01-02 23:33:40 and 2011-01-03 00:32:15. <pre><code>racadm lclog view -r \"2023-02-09 00:00:00\" -e \"2023-02-10 16:00:00\"\n</code></pre> Get Power profile from BIOS <pre><code>racadm get BIOS.SysProfileSettings\n</code></pre> Rollback an iDRAC firmware update <pre><code>racadm rollback iDRAC.Embedded.1-1\n</code></pre></p>"}]}